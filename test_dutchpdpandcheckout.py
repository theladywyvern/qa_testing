# PREREQUISITE: User must already be logged in to the site
# This script assumes you're starting from the dashboard/home page after login
# SPECIFIC TO DUTCH BROS SITE ONLY - PDP and Checkout functionality

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestDutchpdpandcheckout():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_dutchpdpandcheckout(self):
    # Navigate to Dutch Bros site (hardcoded as requested)
    self.driver.get("https://habit.pixalized.com/")
    self.driver.set_window_size(550, 704)
    
    # Handle any popups/modals
    try:
        self.driver.find_element(By.LINK_TEXT, "Ã—").click()
    except:
        pass  # Skip if no popup
    
    # Search for specific QA 2025 product
    self.driver.find_element(By.ID, "search").click()
    self.driver.find_element(By.ID, "search").send_keys("QA 2025")
    self.driver.find_element(By.ID, "search").send_keys(Keys.ENTER)
    
    # Wait for search results and select first available product
    wait = WebDriverWait(self.driver, 10)
    product_elements = wait.until(expected_conditions.presence_of_all_elements_located((By.CSS_SELECTOR, ".product_image")))
    
    # Select first product from search results
    product_elements[0].click()
    
    # Add to cart
    self.driver.find_element(By.CSS_SELECTOR, ".btn-squared").click()
    self.driver.find_element(By.CSS_SELECTOR, ".aria-hidden").click()
    
    # Navigate to cart and checkout
    try:
        self.driver.find_element(By.CSS_SELECTOR, ".github-fork-ribbon").click()
    except:
        pass  # Skip if element doesn't exist
    
    self.driver.find_element(By.CSS_SELECTOR, ".link-to-cart .mr-1").click()
    self.driver.find_element(By.CSS_SELECTOR, ".d-md-block").click()
    
    # Search for Belden addresses
    self.driver.find_element(By.NAME, "search").click()
    self.driver.find_element(By.NAME, "search").send_keys("belden")
    
    # Wait for address search results to load
    time.sleep(3)
    
    # Find all available address checkboxes and select up to 2
    address_checkboxes = self.driver.find_elements(By.CSS_SELECTOR, ".checkbox")
    
    if not address_checkboxes:
        raise Exception("No Belden addresses found - cannot proceed with checkout")
    
    addresses_selected = 0
    for checkbox in address_checkboxes:
        if addresses_selected < 2:
            try:
                checkbox.click()
                addresses_selected += 1
                time.sleep(0.5)  # Brief pause between selections
            except:
                continue  # Skip if checkbox can't be clicked
        else:
            break  # Stop after selecting 2 addresses
    
    if addresses_selected == 0:
        raise Exception("Could not select any Belden addresses - cannot proceed with checkout")
    
    # Continue to next step
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    
    # Cost center manipulation
    self.driver.execute_script("window.scrollTo(0,0)")
    
    # Click on first cost center dropdown
    self.driver.find_element(By.CSS_SELECTOR, ".cost-centers-shipments-item:nth-child(1) > .cost-centers-shipments-item-summary:nth-child(1) .ui-select-match-text:nth-child(2) > span:nth-child(1)").click()
    
    # Change from Basic to Test
    try:
        # Wait for dropdown to open
        wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".open > .form-control")))
        self.driver.find_element(By.CSS_SELECTOR, ".open > .form-control").click()
        
        # Select "Test" option
        test_option = wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#ui-select-choices-row-0-2 div")))
        test_option.click()
        
        time.sleep(1)  # Brief pause
        
        # Switch back to Basic - click dropdown again
        self.driver.find_element(By.CSS_SELECTOR, ".cost-centers-shipments-item:nth-child(1) > .cost-centers-shipments-item-summary:nth-child(1) .ui-select-match-text:nth-child(2) > span:nth-child(1)").click()
        
        # Select Basic option (assuming it's the first option)
        basic_option = wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, "#ui-select-choices-row-0-0 div")))
        basic_option.click()
        
    except Exception as e:
        print(f"Cost center switching failed: {e}")
    
    # Continue to payment (assuming same CC checkout logic)
    try:
        self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
        
        # Check for available credit cards
        credit_card_options = self.driver.find_elements(By.CSS_SELECTOR, ".co-payment-credit-card-row label")
        
        if not credit_card_options:
            raise Exception("No credit cards found - cannot complete checkout")
        
        # Select first available credit card
        credit_card_options[0].click()
        
        # Complete checkout
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
        
    except Exception as e:
        print(f"Payment step failed: {e} - continuing without payment validation")

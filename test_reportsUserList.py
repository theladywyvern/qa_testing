# PREREQUISITE: User must already be logged in to the site
# This script assumes you're starting from the dashboard/home page after login
# Generates User List Report and analyzes the data

# Generated by Selenium IDE
import pytest
import time
import json
import pandas as pd
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.support.ui import Select

# Configuration - Update these for your site
BASE_URL = "https://[SITENAME].pixalized.com"
DOWNLOAD_PATH = "C:/Users/[USERNAME]/Downloads"  # Update to your downloads folder

class TestReportsUserList():
  def setup_method(self, method):
    # Configure Firefox to download files without prompting
    firefox_profile = webdriver.FirefoxProfile()
    firefox_profile.set_preference("browser.download.folderList", 2)
    firefox_profile.set_preference("browser.download.manager.showWhenStarting", False)
    firefox_profile.set_preference("browser.download.dir", DOWNLOAD_PATH)
    firefox_profile.set_preference("browser.helperApps.neverAsk.saveToDisk", 
                                 "application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    
    self.driver = webdriver.Firefox(firefox_profile=firefox_profile)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def find_latest_user_report(self):
    """Find the most recently downloaded user list report"""
    files = os.listdir(DOWNLOAD_PATH)
    user_reports = [f for f in files if 'user_list_report' in f.lower() and f.endswith('.xlsx')]
    
    if not user_reports:
        raise Exception("No user list report found in downloads folder")
    
    # Get the most recent file
    latest_file = max(user_reports, key=lambda x: os.path.getctime(os.path.join(DOWNLOAD_PATH, x)))
    return os.path.join(DOWNLOAD_PATH, latest_file)
  
  def analyze_user_report(self, file_path):
    """Analyze the user list report and generate insights"""
    try:
        # Read the Excel file
        df = pd.read_excel(file_path)
        
        print(f"\n=== USER LIST REPORT ANALYSIS ===")
        print(f"Report file: {os.path.basename(file_path)}")
        print(f"Analysis date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"=" * 50)
        
        # Basic statistics
        print(f"\n📊 SUMMARY STATISTICS:")
        print(f"Total users: {len(df)}")
        print(f"Total columns: {len(df.columns)}")
        print(f"Column names: {list(df.columns)}")
        
        # Check for common columns and analyze
        if 'Status' in df.columns or 'status' in df.columns:
            status_col = 'Status' if 'Status' in df.columns else 'status'
            print(f"\n👥 USER STATUS BREAKDOWN:")
            status_counts = df[status_col].value_counts()
            for status, count in status_counts.items():
                percentage = (count / len(df)) * 100
                print(f"  {status}: {count} ({percentage:.1f}%)")
        
        # Check for email domains
        email_columns = [col for col in df.columns if 'email' in col.lower() or 'mail' in col.lower()]
        if email_columns:
            email_col = email_columns[0]
            print(f"\n📧 EMAIL DOMAIN ANALYSIS:")
            domains = df[email_col].str.extract(r'@([^.]+\..*)')
            domain_counts = domains[0].value_counts().head(10)
            for domain, count in domain_counts.items():
                percentage = (count / len(df)) * 100
                print(f"  {domain}: {count} ({percentage:.1f}%)")
        
        # Check for role/permission columns
        role_columns = [col for col in df.columns if any(word in col.lower() for word in ['role', 'permission', 'access', 'group'])]
        if role_columns:
            print(f"\n🔐 USER ROLES/PERMISSIONS:")
            for col in role_columns[:3]:  # Show first 3 role columns
                role_counts = df[col].value_counts().head(5)
                print(f"  {col}:")
                for role, count in role_counts.items():
                    print(f"    {role}: {count}")
        
        # Date analysis if available
        date_columns = [col for col in df.columns if any(word in col.lower() for word in ['date', 'created', 'modified', 'updated'])]
        if date_columns:
            print(f"\n📅 DATE ANALYSIS:")
            for col in date_columns[:2]:  # Show first 2 date columns
                try:
                    df[col] = pd.to_datetime(df[col])
                    print(f"  {col}:")
                    print(f"    Earliest: {df[col].min()}")
                    print(f"    Latest: {df[col].max()}")
                    print(f"    Recent (last 30 days): {sum(df[col] > (datetime.now() - pd.Timedelta(days=30)))}")
                except:
                    print(f"    {col}: Unable to parse dates")
        
        # Data quality checks
        print(f"\n🔍 DATA QUALITY:")
        print(f"Duplicate rows: {df.duplicated().sum()}")
        print(f"Rows with missing data: {df.isnull().any(axis=1).sum()}")
        
        missing_by_column = df.isnull().sum()
        if missing_by_column.sum() > 0:
            print(f"Missing data by column:")
            for col, missing_count in missing_by_column[missing_by_column > 0].items():
                percentage = (missing_count / len(df)) * 100
                print(f"  {col}: {missing_count} ({percentage:.1f}%)")
        
        # Sample data preview
        print(f"\n📋 SAMPLE DATA (first 3 rows):")
        print(df.head(3).to_string())
        
        print(f"\n" + "=" * 50)
        print(f"Analysis complete!")
        
    except Exception as e:
        print(f"Error analyzing report: {e}")
        raise
  
  def test_reportsUserList(self):
    # Navigate to User List Report
    self.driver.find_element(By.LINK_TEXT, "User List Report").click()
    
    # Set report format to XLS
    wait = WebDriverWait(self.driver, 10)
    dropdown = wait.until(expected_conditions.element_to_be_clickable((By.CSS_SELECTOR, ".ng-not-empty:nth-child(1)")))
    
    select = Select(dropdown)
    select.select_by_visible_text("XLS")
    
    # Generate the report
    self.driver.find_element(By.CSS_SELECTOR, ".col-md-2 > .btn").click()
    
    # Wait for download to complete
    print("Waiting for report download...")
    time.sleep(10)  # Adjust based on report size and connection speed
    
    # Find and analyze the downloaded report
    try:
        report_file = self.find_latest_user_report()
        print(f"Found report: {report_file}")
        self.analyze_user_report(report_file)
    except Exception as e:
        print(f"Report analysis failed: {e}")
        raise

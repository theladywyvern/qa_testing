# PREREQUISITE: User must already be logged in to the site
# This script assumes you're starting from the dashboard/home page after login
# FOR ANGULAR SITES ONLY - PDP and Checkout functionality

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# Configuration - Update these for your site
BASE_URL = "https://[SITENAME].pixalized.com"

class TestAngPDPCheckout():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_angPDPCheckout(self):
    # Navigate to site home page
    self.driver.get(BASE_URL)
    self.driver.set_window_size(1382, 784)
    
    # Search for QA products
    self.driver.find_element(By.ID, "search").click()
    self.driver.find_element(By.ID, "search").send_keys("QA1")
    self.driver.find_element(By.ID, "search").send_keys(Keys.ENTER)
    
    # Wait for search results and select first available product
    wait = WebDriverWait(self.driver, 10)
    product_elements = wait.until(expected_conditions.presence_of_all_elements_located((By.CSS_SELECTOR, ".product_image")))
    
    # Select first product from search results
    product_elements[0].click()
    
    # Add to cart
    self.driver.find_element(By.CSS_SELECTOR, ".btn-squared").click()
    self.driver.find_element(By.CSS_SELECTOR, ".aria-hidden").click()
    
    # Go to cart and checkout
    self.driver.find_element(By.CSS_SELECTOR, ".link-to-cart .mr-1").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".link-to-cart > .nav-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-sm:nth-child(1)").click()
    
    # Search for Belden addresses
    self.driver.find_element(By.NAME, "search").click()
    self.driver.find_element(By.NAME, "search").send_keys("Belden")
    
    # Wait for address search results to load
    time.sleep(3)
    
    # Find all available address checkboxes and select up to 2
    address_checkboxes = self.driver.find_elements(By.CSS_SELECTOR, ".checkbox")
    
    if not address_checkboxes:
        raise Exception("No Belden addresses found - cannot proceed with checkout")
    
    addresses_selected = 0
    for checkbox in address_checkboxes:
        if addresses_selected < 2:
            try:
                checkbox.click()
                addresses_selected += 1
                time.sleep(0.5)  # Brief pause between selections
            except:
                continue  # Skip if checkbox can't be clicked
        else:
            break  # Stop after selecting 2 addresses
    
    if addresses_selected == 0:
        raise Exception("Could not select any Belden addresses - cannot proceed with checkout")
    
    # Continue to next checkout step
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    element = self.driver.find_element(By.CSS_SELECTOR, ".billing-breadcrumb-disabled > .btn")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    self.driver.execute_script("window.scrollTo(0,585)")
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    
    # Payment method selection - select credit card
    self.driver.find_element(By.CSS_SELECTOR, ".payment-method-option:nth-child(1) > label").click()
    
    # Check for available credit cards
    credit_card_options = self.driver.find_elements(By.CSS_SELECTOR, ".co-payment-credit-card-row label")
    
    if not credit_card_options:
        raise Exception("No credit cards found - cannot complete checkout")
    
    # Select first available credit card
    credit_card_options[0].click()
    
    # Continue with checkout
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()
    
    # Final order sign-off
    self.driver.find_element(By.CSS_SELECTOR, ".section-order-sign-off").click()
    self.driver.find_element(By.CSS_SELECTOR, "label").click()
    self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()

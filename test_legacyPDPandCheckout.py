# PREREQUISITE: User must already be logged in to the site
# This script assumes you're starting from the dashboard/home page after login
# FOR LEGACY SITES ONLY - PDP and Checkout functionality

# Generated by Selenium IDE
import pytest
import time
import json
import random
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# Configuration - Update these for your site
BASE_URL = "https://[SITENAME].pixalized.com"

class TestLegacyPDPandCheckout():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_legacyPDPandCheckout(self):
    # Search for QA products
    self.driver.find_element(By.ID, "search").click()
    self.driver.find_element(By.ID, "search").send_keys("QA")
    self.driver.find_element(By.ID, "search").send_keys(Keys.ENTER)
    
    # Wait for search results and select first available product
    wait = WebDriverWait(self.driver, 10)
    product_elements = wait.until(expected_conditions.presence_of_all_elements_located((By.CSS_SELECTOR, ".catalog_four_columns .h3")))
    
    # Select first product from search results (handles 1 or multiple results)
    product_elements[0].click()
    
    # Add to cart
    self.driver.find_element(By.CSS_SELECTOR, ".btn-squared").click()
    
    # Go to shopping cart
    self.driver.find_element(By.CSS_SELECTOR, ".shopping-cart-label").click()
    
    # Proceed to checkout
    self.driver.find_element(By.CSS_SELECTOR, ".btn-sm:nth-child(1)").click()
    
    # Search for Belden addresses
    self.driver.find_element(By.NAME, "search").click()
    self.driver.find_element(By.NAME, "search").send_keys("belden")
    
    # Wait for address search results to load
    time.sleep(3)
    
    # Find all available address checkboxes and select up to 2
    address_checkboxes = self.driver.find_elements(By.CSS_SELECTOR, ".checkbox")
    
    if not address_checkboxes:
        raise Exception("No Belden addresses found - cannot proceed with checkout")
    
    addresses_selected = 0
    for checkbox in address_checkboxes:
        if addresses_selected < 2:
            try:
                checkbox.click()
                addresses_selected += 1
                time.sleep(0.5)  # Brief pause between selections
            except:
                continue  # Skip if checkbox can't be clicked
        else:
            break  # Stop after selecting 2 addresses
    
    if addresses_selected == 0:
        raise Exception("Could not select any Belden addresses - cannot proceed with checkout")
    
    # Continue through checkout process
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
    
    # Final checkout step
    self.driver.find_element(By.CSS_SELECTOR, "label").click()
    self.driver.find_element(By.CSS_SELECTOR, ".text-right > .btn").click()
